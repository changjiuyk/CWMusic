const DEFAULT_PORT_NAMES={incoming:"webnativeRequest",outgoing:"webnativeResponse"};(function(g,r){typeof exports=="object"&&typeof exports.nodeName!="string"?r(exports,require("webnative")):r(g.webnativeElm={},g.webnative)})(typeof self<"u"?self:this,function(g,r){let c;const u=()=>c;g.request=function({app:o,request:e,getFs:n=u,portNames:t=DEFAULT_PORT_NAMES}){switch(e.context){case"WEBNATIVE":return s({app:o,portNames:t,request:e});case"WNFS":return f({app:o,getFs:n,portNames:t,request:e})}return{getFs:n,portNames:t}},g.setup=function({app:o,getFs:e=u,portNames:n=DEFAULT_PORT_NAMES,webnative:t}){if(t&&(r=t),!r)throw new Error("Failed to load webnative");if(!o.ports||!o.ports[n.incoming]){console.warn(`Couldn't find the incoming Elm port for webnative named "${n.incoming}". Could be that you haven't used the port yet, dead code elimination.`);return}return o.ports[n.outgoing]||console.warn(`Not sending webnative responses back to your Elm app, because the outgoing port named "${n.outgoing}" was not found. Could be that you haven't used the port yet, dead code elimination.`),o.ports[n.incoming].subscribe(d=>{g.request({request:d,app:o,getFs:e,portNames:n})}),{getFs:e,portNames:n}};function s({app:o,portNames:e,request:n}){Promise.resolve(r[n.method](...n.arguments)).then(t=>{switch(n.method){case"redirectToLobby":return;case"loadFileSystem":c=t;case"initialise":c=t.fs;default:o.ports[e.outgoing]&&o.ports[e.outgoing].send({tag:n.tag,error:null,method:n.method,data:t,context:n.context})}}).catch(t=>{o.ports[e.outgoing]&&o.ports[e.outgoing].send({tag:n.tag,error:t.message||t,method:n.method,data:null,context:n.context})})}function f({app:o,getFs:e,portNames:n,request:t}){const d=t.method.replace(/_utf8$/,"");t.method==="write"&&(t.arguments=[t.arguments[0],Uint8Array.from(t.arguments[1])]),Promise.resolve(e()).then(i=>i[d](...t.arguments)).then(i=>{o.ports[n.outgoing]&&o.ports[n.outgoing].send({tag:t.tag,error:null,method:t.method,data:(()=>i.root?null:i.multihash?i.toString():i.buffer?Array.from(i):i)(),context:t.context})}).catch(i=>{o.ports[n.outgoing]&&o.ports[n.outgoing].send({tag:t.tag,error:i.message||i,method:t.method,data:null,context:t.context})})}});
